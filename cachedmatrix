## Caching the inverse of a Matrix


## Put comments here that give an overall description of what your
## functions do

## This function creates a special matrix object that can cache its inverse
#1 set the value of the matrix
#2 get the value of the matrix

makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  get <- function() x
  setinverse <- function(inverse) inv <<- inverse
  getinverse <- function() inv
  list(set=set, get=get,
       setinverse = setinverse,
       getinverse = getinverse)
}


## computes the inverse of the special matrix returned by makeCacheMatrix above
#3 set the value of the inverse
#4 get the value of the inverse

cacheSolve <- function(x, ...) {
  inv <- x$getinverse()
  if(!is.null(inv)) {
    message('getting cached data')
    return(inv)
  }
  data <- x$get()
  inv <- solve(data)
  x$setinverse(inv)
  inv
}
