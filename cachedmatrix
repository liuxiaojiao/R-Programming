## Caching the inverse of a Matrix


## Put comments here that give an overall description of what your
## functions do

## This function creates a special matrix object that can cache its inverse
#1 set the value of the matrix
#2 get the value of the matrix

makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  get <- function() x
  setinverse <- function(inverse) inv <<- inverse
  getinverse <- function() inv
  list(set=set, get=get,
       setinverse = setinverse,
       getinverse = getinverse)
}


## computes the inverse of the special matrix returned by makeCacheMatrix above
#3 set the value of the inverse
#4 get the value of the inverse

cacheSolve <- function(x, ...) {
  inv <- x$getinverse()
  if(!is.null(inv)) {
    message('getting cached data')
    return(inv)
  } ## first checks if the inverse has been calculated. if so, skips the inverse.
  data <- x$get()
  inv <- solve(data) #Square matrix inverse function
  x$setinverse(inv)
  inv
}





#####check the result:
### x <- matrix(c(2, 4, 6, 8, 5, 4, 3, 7, 2), nrow=3, ncol=3)
### example <- makeCacheMatrix(x)
### example$get()
###      [,1] [,2] [,3]
###[1,]    2    8   3
###[2,]    4    5   7
###[3,]    6    4   2
###
### cacheSolve(example)
###      [,1]        [,2]        [,3]
###[1,] -0.09278351 -0.02061856  0.21134021
###[2,]  0.17525773 -0.07216495 -0.01030928
###[3,] -0.07216495  0.20618557 -0.11340206
